class ForwardListMessageService

  class ForwardListMessageServiceError < StandardError; end

  def initialize(options)
    @subscribers = options.fetch(:subscribers) do
      fail ForwardListMessageServiceError, "Missing subscribers addresses"
    end
    @message = options.fetch(:message) do
      fail ForwardListMessageServiceError, "Missing message source"
    end
  end

  # TODO:
  # * RFC2821 section 3.10 && RFC2821 section 3.10.2::
  #   [...]When a message is delivered or forwarded to each address of an
  #   expanded list form, the return address in the envelope ("MAIL FROM:")
  #   MUST be changed to be the address of a person or other entity who
  #   administers the list.[...]
  #   [...]The return address in the envelope is changed so that all
  #   error messages generated by the final deliveries will be returned to
  #   a list administrator, not to the message originator[...].
  #   => Use the list owner?
  # * RFC2822 section 3.6.2
  #   [...]The "Sender:" field specifies the mailbox of the agent responsible
  #   for the actual transmission of the message.[...]
  #   => Use the list owner?
  def call
    @new_message = Mail.read_from_string(@message)

    update_return_address_in_the_envelope

    @new_message.deliver
  end

  private

  # RFC2821 section 3.10.2
  #
  # [...]To expand a list, the recipient mailer replaces the pseudo-mailbox
  # address in the envelope with all of the expanded[...]
  def update_return_address_in_the_envelope
    @new_message.smtp_envelope_to = @subscribers
  end
end
